[alias]
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lga = log --graph --decorate --all --stat
  rh = reset HEAD
	lg = !"git lg1"
  fap = fetch --all -p -t
  pur = pull --all --rebase
  puf = push -f
  rbm = rebase -i master
	mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
  feat = !sh -c 'git checkout develop && git checkout -b feature/$1 && git push -u origin feature/$1'
  stp = stash pop
  stl = stash list
  sts = stash show --text
  undo = reset --soft HEAD^
  rmbranch = "!f(){ : branch git branch -d ${1}; git push origin --delete ${1}; };f"

[merge]
  ff = only
  # I pretty much never mean to do a real merge, since I use a rebase workflow.
  # Note: this global option applies to all merges, including those done during a git pull
  # https://git-scm.com/docs/git-config#git-config-mergeff

  conflictstyle = diff3
  # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[commit]
  # gpgSign = true
  # "other people can trust that the changes you've made really were made by you"
  # https://help.github.com/articles/about-gpg/
  # https://git-scm.com/docs/git-config#git-config-commitgpgSign

[push]
  default = simple
  # "push the current branch back to the branch whose changes are usually integrated into the current branch"
  # "refuse to push if the upstream branchâ€™s name is different from the local one"
  # https://git-scm.com/docs/git-config#git-config-pushdefault

  followTags = true
  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles


# A nice little github-like colorful, split diff right in the console.
# via http://owen.cymru/github-style-diff-in-terminal-with-icdiff/
[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool "icdiff"]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
[user]
	name = SuHun Han
	email = ssut@ssut.me


